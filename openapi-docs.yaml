openapi: 3.0.1
info:
  title: Price Negotiation App
  contact:
    name: Łukasz Górski
    url: https://www.linkedin.com/in/lukasz-gorski-lukegor/
    email: lukaszgorski02@gmail.com
  license:
    name: Apache License 2.0
    url: https://opensource.org/license/apache-2-0/
  version: v1
paths:
  /Login:
    post:
      tags:
        - Authentication
      summary: Log into an account
      requestBody:
        description: username and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginModel'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
  /Logout:
    post:
      tags:
        - Authentication
      summary: Log out of an account
      responses:
        '200':
          description: Success
  /Registration:
    post:
      tags:
        - Authentication
      summary: Registers a new user.
      requestBody:
        description: The data required for user registration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
  /api/v1/Negotiations/Negotiation/all:
    get:
      tags:
        - Negotiation
      summary: Retrieves a list of all negotiations.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Negotiation'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Negotiation'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Negotiation'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/Negotiations/Negotiation/{id}':
    get:
      tags:
        - Negotiation
      summary: Retrieves a specific negotiation by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the negotiation to retrieve.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Negotiation'
            application/json:
              schema:
                $ref: '#/components/schemas/Negotiation'
            text/json:
              schema:
                $ref: '#/components/schemas/Negotiation'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Negotiation
      summary: Updates a specific negotiation by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the negotiation to update.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The updated negotiation data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          text/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Negotiation'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Negotiation
      summary: Deletes a specific negotiation by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the negotiation to delete.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Negotiations/Negotiation:
    patch:
      tags:
        - Negotiation
      summary: Proposes a new price for a negotiation.
      parameters:
        - name: proposedPrice
          in: query
          description: The proposed price for the negotiation.
          schema:
            type: number
            format: double
      requestBody:
        description: The negotiation to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          text/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Negotiation'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    post:
      tags:
        - Negotiation
      summary: Creates a new negotiation.
      requestBody:
        description: The negotiation data to be processed into negotiation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NegotiationInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/NegotiationInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/NegotiationInputModel'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Negotiation'
            application/json:
              schema:
                $ref: '#/components/schemas/Negotiation'
            text/json:
              schema:
                $ref: '#/components/schemas/Negotiation'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Negotiations/Negotiation/response:
    patch:
      tags:
        - Negotiation
      summary: Responds to a negotiation proposal.
      parameters:
        - name: isApproved
          in: query
          description: A flag indicating whether the proposal is approved or not.
          schema:
            type: boolean
      requestBody:
        description: The negotiation object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          text/json:
            schema:
              $ref: '#/components/schemas/Negotiation'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Negotiation'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1/Products/Product/all:
    get:
      tags:
        - Product
      summary: Retrieves a list of all products.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  '/api/v1/Products/Product/{id}':
    get:
      tags:
        - Product
      summary: Retrieves a specific product by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the product to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Product
      summary: Updates a specific product by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The updated product data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    delete:
      tags:
        - Product
      summary: Deletes a specific product by its unique identifier.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the product to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/Products/Product:
    post:
      tags:
        - Product
      summary: Creates a new product.
      requestBody:
        description: The product data to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ProductInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProductInputModel'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    LoginModel:
      required:
        - password
        - username
      type: object
      properties:
        username:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    Negotiation:
      required:
        - productId
        - proposedPrice
        - retriesLeft
        - status
        - userId
      type: object
      properties:
        id:
          type: integer
          format: int32
        productId:
          minLength: 1
          type: string
        proposedPrice:
          type: number
          format: double
        isAccepted:
          type: boolean
          nullable: true
        retriesLeft:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/NegotiationStatus'
        userId:
          minLength: 1
          type: string
      additionalProperties: false
    NegotiationInputModel:
      required:
        - productId
        - proposedPrice
        - userId
      type: object
      properties:
        productId:
          minLength: 1
          type: string
        proposedPrice:
          minimum: 0.01
          type: number
          format: double
        userId:
          minLength: 1
          type: string
      additionalProperties: false
    NegotiationStatus:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Product:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          minLength: 1
          type: string
        price:
          minimum: 0
          type: number
          format: double
      additionalProperties: false
    ProductInputModel:
      required:
        - name
        - price
      type: object
      properties:
        name:
          minLength: 1
          type: string
        price:
          minimum: 0.01
          type: number
          format: double
      additionalProperties: false
    RegisterUserDTO:
      required:
        - confirmPassword
        - email
        - name
        - password
        - userName
      type: object
      properties:
        userName:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          type: string
        streetAddress:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        password:
          minLength: 1
          type: string
        confirmPassword:
          minLength: 1
          type: string
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Authorization header using the Bearer scheme for JWT
      name: Authorization
      in: header
security:
  - Bearer: [ ]
